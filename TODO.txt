Shared
3. Write unit tests for IndegoHttpService
        - Make actual HTTP request. In unit tests, it is not required to make actual HTTP calls. That should be done instead in E2E tests
        - Mocking HTTP Requests
            - Using nock. Nock works by intercepting external HTTP requests and enabling us to return 
                  custom responses. 
           -  It works by overriding Node's http.request function and i
             Refer: https://github.com/node-nock/nock#how-does-it-work and https://scotch.io/tutorials/nodejs-tests-mocking-http-requests

4. Write unit tests for OpenWeatherHttpService
        - Mock HTTP requests using sinon. Refer: http://mherman.org/blog/2017/11/06/stubbing-http-requests-with-sinon/#.WvFyI4iFM2z
5. Verify if kioskId index is working


Query Service
5. Write unit tests for Query Service
Include Shared type declarations to remove the ts warning when using import


API Service
1. Unit tests
      Test routes. When hitting routes, appropriate status code is sent. For eg: test if /api/v1/stations? returns expected code
      Testing Controllers - https://scotch.io/tutorials/test-a-node-restful-api-with-mocha-and-chai

3. Adding compression middleware is not firing the routes
      Ideally CPU-intensive tasks like compression,SSL Termination should be avoided in Node because of its single threaded nature.
      Solution is to push to a reverse proxy (nginx/HAProxy) which sits infront of Node.
      Node is best suited for serving dynamic content
4. Fix issue where doing npm run start is failing to load .env
5. Do a performance test using Apache ab tool similar to FormBuilder. Note down the numbers

Common
1. Use describe.skip to split between unit and integration tests
1. Deploy to PCF
2. Deploy using Docker to AWS Elastic Beanstalk
3. Push to Github
4. Steps for building/running 
5. Design logging.For eg: use a package which can log and define in Shared module
6. Create a npx/npm package which can be used to scaffold a Node project
      NodeJS + Express + TypeScript + MongoDb + Unit Test + Sample Code
   Usage:
      npx install create-node-app
        - This will scaffold the app code, unit tests, package.json, npm install
      cd <appfolder>
      npm start

DONE:
1. Configure mocha tests in TypeScript - https://journal.artfuldev.com/write-tests-for-typescript-projects-with-mocha-and-chai-in-typescript-86e053bdb2b6
2. Design DAL for mongodb
1. Find out best way to inject appid and urls for external APIs. Right now it is hardcoded. Use env npm package. See if that will work for PCF
6. Define TypeScript types for Shared module
7. Read all configuration in Query Service from env
2. API Versioning

References:
https://github.com/g2i/backend-challenge
https://www.compose.com/articles/understanding-dates-in-compose-mongodb/
https://stackoverflow.com/questions/19819870/date-query-with-isodate-in-mongodb-doesnt-seem-to-work
https://semaphoreci.com/community/tutorials/mocking-external-http-requests-in-node-tests-with-nock
https://github.com/node-nock/nock#read-this---about-interceptors
https://glebbahmutov.com/blog/how-to-correctly-unit-test-express-server/
https://blog.khophi.co/mocha-chai-chai-http-test-express-api-auth-endpoints/
https://medium.com/@the1mills/how-to-test-your-npm-module-without-publishing-it-every-5-minutes-1c4cb4b369be
https://www.twilio.com/blog/2017/08/working-with-environment-variables-in-node-js.html
